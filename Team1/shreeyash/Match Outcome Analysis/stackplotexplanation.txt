
Explanation of the Code:

Step 1: Merge Wins and Losses into a Single DataFrame
-----------------------------------------------------
wins_per_season = wins_per_season.rename(columns={'winner': 'team'})
wins_losses_per_season = pd.merge(wins_per_season, losses_per_season, on=['season', 'team'], how='outer').fillna(0)

- What is happening here?
  - Rename Column: We rename the column 'winner' to 'team' in the 'wins_per_season' DataFrame. This makes it easier to merge with the 'losses_per_season' DataFrame because both DataFrames will have the same column names ('season' and 'team').
  - Merge DataFrames: We merge the 'wins_per_season' and 'losses_per_season' DataFrames into a single DataFrame called 'wins_losses_per_season'. This new DataFrame will have columns for 'season', 'team', 'wins', and 'losses'.
  - Outer Join: The 'how='outer'' parameter ensures that all teams and seasons are included, even if they have only wins or only losses.
  - Fill Missing Values: The 'fillna(0)' function fills any missing values with 0. This means if a team has no wins or no losses in a particular season, it will be recorded as 0 instead of being left empty.

Step 2: Plot the Number of Wins and Losses per Team per Season Using a Stacked Bar Plot
---------------------------------------------------------------------------------------
plt.figure(figsize=(14, 8))
teams = wins_losses_per_season['team'].unique()
for team in teams:
    team_data = wins_losses_per_season[wins_losses_per_season['team'] == team]
    plt.bar(team_data['season'], team_data['wins'], label=f'{team} Wins', color='blue')
    plt.bar(team_data['season'], team_data['losses'], bottom=team_data['wins'], label=f'{team} Losses', color='red')

- What is happening here?
  - Create Figure: We create a new figure for the plot with a specified size of 14 inches by 8 inches.
  - Get Unique Teams: We get a list of all unique teams from the 'wins_losses_per_season' DataFrame.
  - Loop Through Teams: We loop through each team to plot their wins and losses.
    - Filter Data: For each team, we filter the 'wins_losses_per_season' DataFrame to get only the data for that team.
    - Plot Wins: We use 'plt.bar' to create a bar plot for the wins of the team. The bars are colored blue.
    - Plot Losses: We use 'plt.bar' again to create a bar plot for the losses of the team. The 'bottom=team_data['wins']' parameter stacks the losses on top of the wins, and the bars are colored red.

Summary
-------
- We combined the wins and losses into a single DataFrame so that we can see both in one place.
- We created a stacked bar plot to show the number of wins and losses for each team in each season. The blue part of the bar shows the wins, and the red part shows the losses.

This way, we can easily compare the performance of different teams across different seasons.
